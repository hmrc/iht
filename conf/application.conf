# Copyright 2018 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

appName=iht

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Session configuration
# ~~~~~
application.session.httpOnly=false
application.session.secure=false
application.secret="test"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=config.ApplicationGlobal

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
application.router=prod.Routes


# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {

  confidenceLevel = 200

  com.kenshoo.play.metrics.MetricsController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
}

play.modules.enabled += "com.kenshoo.play.metrics.PlayModule"
play.http.requestHandler = "play.api.http.GlobalSettingsHttpRequestHandler"

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}

# Set a large time out to give enough time for testing
ws.timeout.request = 45000

# Microservice specific config

  txmonitoring {
    enabled=true
    traceRequests=true
  }

  auditing {
    enabled = true
    traceRequests = true
    consumer {
      baseUri {
        host = localhost
        port = 8100
      }
    }

  }

  microservice {
    metrics {
      graphite {
        host = localhost
        port = 2003
        prefix = play.${appName}.
        enabled = false
      }
    }

    services {
      timeout = 5 seconds

      delay-response = 2 seconds

      protocol=http

      auth {
        host=localhost
        port=8500
      }

      datastream {
        host=localhost
        port=8100
      }

      iht {
        host = localhost
        port = 9072
        des.authorization-key = DESKEY
        des.environment = DES
      }

    }
  }

  securestorage {
    # First part of the key used for encryption (the other part is the per-record key)
    platformkey = LOCALKEY

    # Host of the MongoDB server to connect to
    host = localhost

    # Name of the mongo collection to connect to
    dbname = securestorage
  }
